{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","App","state","privateKey","publicKey","encryptedMessage","decryptedMessage","passphrase","username","email","loading_generate","loading_encrypt","loading_decrypt","generateKeysModalVisible","passphraseModalVisible","this","gpgManager","GpgManager","rsaKeyBits","loadingIcon","type","style","fontSize","spin","message","showNotification","title","notification","description","duration","onClick","setState","hideGenerateKeysModal","generateKeyPair","user","name","showError","encrypt","signMessage","hidePassphraseModal","decrypt","verify","content","filename","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","removeChild","validator","isEmail","className","justify","gutter","span","ghost","showGenerateKeysModal","bind","indicator","okText","cancelButtonProps","bodyStyle","backgroundColor","color","visible","onOk","generateKeys","okButtonProps","default","disabled","okType","onCancel","placeholder","onChange","e","isValidEmail","target","value","Password","showPassphraseModal","autoSize","minRows","maxRows","evt","onCopy","copyToClipboard","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8038021c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GpgManager from \"gpg-manager\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Button, Input, Row, Col, notification, Spin, Icon, Modal } from \"antd\";\nimport validator from \"validator\";\nconst { TextArea } = Input;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      privateKey: \"\",\n      publicKey: \"\",\n      encryptedMessage: \"\",\n      decryptedMessage: \"\",\n      passphrase: \"\",\n      username: \"test@example.com\",\n      email: \"\",\n      loading_generate: false,\n      loading_encrypt: false,\n      loading_decrypt: false,\n      generateKeysModalVisible: false,\n      passphraseModalVisible: false\n    };\n  }\n\n  async componentDidMount() {\n    this.gpgManager = new GpgManager({ rsaKeyBits: 4096 });\n    this.loadingIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n  }\n\n  showError(message) {\n    this.showNotification(\"error\", \"Error\", message);\n  }\n\n  showNotification(type, title, message) {\n    notification[type]({\n      message: title,\n      description: message,\n      duration: 3,\n      onClick: () => {}\n    });\n  }\n\n  showGenerateKeysModal() {\n    this.setState({ generateKeysModalVisible: true });\n  }\n\n  hideGenerateKeysModal() {\n    this.setState({ generateKeysModalVisible: false });\n  }\n\n  showPassphraseModal() {\n    this.setState({ passphraseModalVisible: true });\n  }\n\n  hidePassphraseModal() {\n    this.setState({ passphraseModalVisible: false });\n  }\n\n  async generateKeys() {\n    this.hideGenerateKeysModal();\n    this.setState({ loading_generate: true });\n    try {\n      const { privateKey, publicKey } = await this.gpgManager.generateKeyPair({\n        passphrase: this.state.passphrase,\n        user: {\n          email: this.state.email,\n          name: this.state.username\n        }\n      });\n\n      this.setState({ publicKey, privateKey });\n    } catch (err) {\n      this.showError(\"Could not generate keys\");\n    }\n\n    this.setState({ loading_generate: false });\n  }\n\n  async encrypt() {\n    if (!this.state.publicKey) {\n      return this.showError(\"Please provide public key\");\n    }\n\n    if (!this.state.decryptedMessage) {\n      return this.showError(\"Please provide message\");\n    }\n\n    this.setState({ loading_encrypt: true });\n    try {\n      const encryptedMessage = await this.gpgManager.encrypt({\n        publicKey: this.state.publicKey,\n        signMessage: false,\n        message: this.state.decryptedMessage\n      });\n\n      this.setState({ encryptedMessage });\n    } catch (err) {\n      this.showError(\n        \"Could not encrypt message. Check if public key is correct\"\n      );\n    }\n\n    this.setState({ loading_encrypt: false });\n  }\n\n  async decrypt() {\n    this.hidePassphraseModal();\n    if (!this.state.privateKey) {\n      return this.showError(\"Please provide private key\");\n    }\n\n    if (!this.state.encryptedMessage) {\n      return this.showError(\"Please provide encrypted message\");\n    }\n\n    this.setState({ loading_decrypt: true });\n\n    try {\n      const decryptedMessage = await this.gpgManager.decrypt({\n        verify: false,\n        privateKey: this.state.privateKey,\n        passphrase: this.state.passphrase,\n        encryptedMessage: this.state.encryptedMessage\n      });\n\n      this.setState({ decryptedMessage });\n    } catch (err) {\n      this.showError(\n        \"Could not decrypt message. Check if provided data is correct\"\n      );\n    }\n    this.setState({ loading_decrypt: false });\n  }\n\n  copyToClipboard(name) {\n    this.showNotification(\"success\", name + \" copied!\", \"\");\n  }\n\n  download(content, filename) {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  isValidEmail(email) {\n    return validator.isEmail(email);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">\n          <Icon type=\"container\" />\n          <span className=\"title\">Online PGP</span>\n        </h1>\n        <Row className=\"row\" type=\"flex\" justify=\"center\" gutter={[0, 100]}>\n          <Col span={6}>\n            <div className=\"menu\">\n              <Button\n                ghost\n                className=\"menu-button\"\n                onClick={this.showGenerateKeysModal.bind(this)}\n              >\n                {this.state.loading_generate ? (\n                  <Spin indicator={this.loadingIcon} />\n                ) : (\n                  \"Generate keys\"\n                )}\n              </Button>\n              <Modal\n                title=\"Provide key data\"\n                okText=\"Generate\"\n                cancelButtonProps={{ ghost: true }}\n                bodyStyle={{ backgroundColor: \"#333842\", color: \"white\" }}\n                visible={this.state.generateKeysModalVisible}\n                onOk={this.generateKeys.bind(this)}\n                okButtonProps={{\n                  default: true,\n                  disabled: !this.state.email || !this.state.passphrase\n                }}\n                okType=\"default\"\n                onCancel={this.hideGenerateKeysModal.bind(this)}\n              >\n                <p className=\"form-title\">E-mail</p>\n                <Input\n                  placeholder=\"E-mail\"\n                  onChange={e => {\n                    if (this.isValidEmail(e.target.value)) {\n                      this.setState({ email: e.target.value });\n                    }\n                  }}\n                />\n                <p className=\"form-title\">Passphrase</p>\n                <Input.Password\n                  placeholder=\"Passphrase\"\n                  onChange={e => this.setState({ passphrase: e.target.value })}\n                />\n              </Modal>\n              <Button\n                ghost\n                className=\"menu-button\"\n                onClick={this.encrypt.bind(this)}\n              >\n                {this.state.loading_encrypt ? (\n                  <Spin indicator={this.loadingIcon} />\n                ) : (\n                  \"Encrypt\"\n                )}\n              </Button>\n              <Button\n                ghost\n                className=\"menu-button\"\n                onClick={() => {\n                  if (this.state.passphrase) {\n                    this.decrypt();\n                  } else {\n                    this.showPassphraseModal();\n                  }\n                }}\n              >\n                {this.state.loading_decrypt ? (\n                  <Spin indicator={this.loadingIcon} />\n                ) : (\n                  \"Decrypt\"\n                )}\n              </Button>\n              <Modal\n                title=\"Provide passphrase\"\n                okText=\"Set\"\n                cancelButtonProps={{ ghost: true }}\n                bodyStyle={{ backgroundColor: \"#333842\", color: \"white\" }}\n                visible={this.state.passphraseModalVisible}\n                onOk={this.decrypt.bind(this)}\n                okButtonProps={{\n                  default: true,\n                  disabled: !this.state.passphrase\n                }}\n                okType=\"default\"\n                onCancel={this.hidePassphraseModal.bind(this)}\n              >\n                <p className=\"form-title\">Passphrase</p>\n                <Input.Password\n                  placeholder=\"Passphrase\"\n                  onChange={e => this.setState({ passphrase: e.target.value })}\n                />\n              </Modal>\n            </div>\n          </Col>\n        </Row>\n        <Row\n          className=\"row\"\n          type=\"flex\"\n          justify=\"space-around\"\n          gutter={[0, 100]}\n        >\n          <Col span={8}>\n            <TextArea\n              autoSize={{ minRows: 10, maxRows: 10 }}\n              placeholder=\"Paste private key here\"\n              className=\"key-input\"\n              value={this.state.privateKey}\n              onChange={evt => this.setState({ privateKey: evt.target.value })}\n            ></TextArea>\n            <CopyToClipboard\n              onCopy={() => {\n                this.copyToClipboard(\"Private key\");\n              }}\n              text={this.state.privateKey}\n            >\n              <Button className=\"textarea-button\" ghost>\n                Copy\n              </Button>\n            </CopyToClipboard>\n            <Button\n              className=\"textarea-button\"\n              ghost\n              onClick={() => {\n                this.download(this.state.privateKey, \"private.key\");\n              }}\n            >\n              Download\n            </Button>\n          </Col>\n          <Col span={8}>\n            <TextArea\n              autoSize={{ minRows: 10, maxRows: 10 }}\n              placeholder=\"Paste public key here\"\n              className=\"key-input\"\n              value={this.state.publicKey}\n              onChange={evt => this.setState({ publicKey: evt.target.value })}\n            ></TextArea>\n            <CopyToClipboard\n              onCopy={() => {\n                this.copyToClipboard(\"Public key\");\n              }}\n              text={this.state.publicKey}\n            >\n              <Button className=\"textarea-button\" ghost>\n                Copy\n              </Button>\n            </CopyToClipboard>\n            <Button\n              className=\"textarea-button\"\n              ghost\n              onClick={() => {\n                this.download(this.state.publicKey, \"public.key\");\n              }}\n            >\n              Download\n            </Button>\n          </Col>\n        </Row>\n        <Row\n          className=\"row\"\n          type=\"flex\"\n          justify=\"space-around\"\n          gutter={[0, 100]}\n        >\n          <Col span={8}>\n            <TextArea\n              autoSize={{ minRows: 10, maxRows: 10 }}\n              placeholder=\"Paste plain text message here\"\n              className=\"key-input\"\n              value={this.state.decryptedMessage}\n              onChange={evt =>\n                this.setState({ decryptedMessage: evt.target.value })\n              }\n            ></TextArea>\n            <CopyToClipboard\n              onCopy={() => {\n                this.copyToClipboard(\"Message\");\n              }}\n              text={this.state.decryptedMessage}\n            >\n              <Button className=\"textarea-button\" ghost>\n                Copy\n              </Button>\n            </CopyToClipboard>\n            <Button\n              className=\"textarea-button\"\n              ghost\n              onClick={() => {\n                this.download(this.state.decryptedMessage, \"message.txt\");\n              }}\n            >\n              Download\n            </Button>\n          </Col>\n          <Col span={8}>\n            <TextArea\n              autoSize={{ minRows: 10, maxRows: 10 }}\n              placeholder=\"Paste encrypted message here\"\n              className=\"key-input\"\n              value={this.state.encryptedMessage}\n              onChange={evt =>\n                this.setState({ encryptedMessage: evt.target.value })\n              }\n            ></TextArea>\n            <CopyToClipboard\n              onCopy={() => {\n                this.copyToClipboard(\"Encrypted message\");\n              }}\n              text={this.state.encryptedMessage}\n            >\n              <Button className=\"textarea-button\" ghost>\n                Copy\n              </Button>\n            </CopyToClipboard>\n            <Button\n              className=\"textarea-button\"\n              ghost\n              onClick={() => {\n                this.download(this.state.encryptedMessage, \"encrypted.txt\");\n              }}\n            >\n              Download\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}