{"version":3,"sources":["components/modal/CredentialsModal.jsx","components/modal/PassphraseModal.jsx","components/topbar/TopBar.jsx","components/textfield/TextField.jsx","App.js","serviceWorker.js","index.js"],"names":["CredentialsModal","props","onOk","onCancel","state","email","passphrase","validator","isEmail","this","title","okText","cancelButtonProps","ghost","bodyStyle","backgroundColor","color","visible","okPressed","bind","okButtonProps","default","disabled","okType","cancelPressed","className","placeholder","onChange","e","isValidEmail","target","value","setState","Password","Component","PassphraseModal","TopBar","onButtonPress","id","loadingIcon","type","style","fontSize","spin","justify","gutter","span","onClick","buttonClicked","loading","generate","indicator","encrypt","decrypt","TextArea","Input","TextField","showNotification","name","message","notification","description","duration","content","filename","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","removeChild","autoSize","minRows","maxRows","text","evt","onCopy","copyToClipboard","App","privateKey","publicKey","encryptedMessage","decryptedMessage","generateKeysModalVisible","passphraseModalVisible","gpgManager","GpgManager","rsaKeyBits","data","generateKeyPair","user","showError","signMessage","verify","generateKeys","onGenerateButtonPress","onEcryptButtonPress","onDecryptButtonPress","onTopBarButtonPress","onGenerateKeysModalOk","onGenerateKeysModalCancel","onPassphraseModalOk","onPassphraseModalCancel","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.14a85876.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Modal, Input } from \"antd\";\nimport validator from \"validator\";\n\nexport class CredentialsModal extends Component {\n  constructor(props) {\n    super(props);\n    const { onOk, onCancel } = this.props;\n\n    this.onOk = onOk;\n    this.onCancel = onCancel;\n    this.state = { email: \"\", passphrase: \"\" };\n  }\n\n  isValidEmail(email) {\n    return validator.isEmail(email);\n  }\n\n  okPressed() {\n    this.onOk({\n      email: this.state.email,\n      passphrase: this.state.passphrase\n    });\n  }\n\n  cancelPressed() {\n    this.onCancel();\n  }\n\n  render() {\n    return (\n      <Modal\n        title=\"Provide key data\"\n        okText=\"Generate\"\n        cancelButtonProps={{ ghost: true }}\n        bodyStyle={{ backgroundColor: \"#333842\", color: \"white\" }}\n        visible={this.props.visible}\n        onOk={this.okPressed.bind(this)}\n        okButtonProps={{\n          default: true,\n          disabled: !this.state.email || !this.state.passphrase\n        }}\n        okType=\"default\"\n        onCancel={this.cancelPressed.bind(this)}\n      >\n        <p className=\"form-title\">E-mail</p>\n        <Input\n          placeholder=\"E-mail\"\n          onChange={e => {\n            if (this.isValidEmail(e.target.value)) {\n              this.setState({ email: e.target.value });\n            }\n          }}\n        />\n        <p className=\"form-title\">Passphrase</p>\n        <Input.Password\n          placeholder=\"Passphrase\"\n          onChange={e => this.setState({ passphrase: e.target.value })}\n        />\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Modal, Input } from \"antd\";\nimport validator from \"validator\";\n\nexport class PassphraseModal extends Component {\n  constructor(props) {\n    super(props);\n    const { onOk, onCancel } = this.props;\n\n    this.onOk = onOk;\n    this.onCancel = onCancel;\n    this.state = { passphrase: \"\" };\n  }\n\n  isValidEmail(email) {\n    return validator.isEmail(email);\n  }\n\n  okPressed() {\n    this.onOk({\n      passphrase: this.state.passphrase\n    });\n  }\n\n  cancelPressed() {\n    this.onCancel();\n  }\n\n  render() {\n    return (\n      <Modal\n        title=\"Provide passphrase\"\n        okText=\"Set\"\n        cancelButtonProps={{ ghost: true }}\n        bodyStyle={{ backgroundColor: \"#333842\", color: \"white\" }}\n        visible={this.props.visible}\n        onOk={this.okPressed.bind(this)}\n        okButtonProps={{\n          default: true,\n          disabled: !this.state.passphrase\n        }}\n        okType=\"default\"\n        onCancel={this.cancelPressed.bind(this)}\n      >\n        <p className=\"form-title\">Passphrase</p>\n        <Input.Password\n          placeholder=\"Passphrase\"\n          onChange={e => this.setState({ passphrase: e.target.value })}\n        />\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Icon, Row, Col, Button, Spin } from \"antd\";\n\nexport class TopBar extends Component {\n  constructor(props) {\n    super(props);\n    const { onButtonPress, title } = this.props;\n\n    this.title = title;\n    this.onButtonPress = onButtonPress;\n  }\n\n  buttonClicked(id) {\n    this.onButtonPress(id);\n  }\n\n  componentDidMount() {\n    this.loadingIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n  }\n\n  render() {\n    return (\n      <header>\n        <h1 className=\"header\">\n          <Icon type=\"container\" />\n          <span className=\"title\">{this.title}</span>\n        </h1>\n        <Row className=\"row\" type=\"flex\" justify=\"center\" gutter={[0, 100]}>\n          <Col span={6}>\n            <div className=\"menu\">\n              <Button\n                ghost\n                className=\"menu-button\"\n                onClick={() => {\n                  this.buttonClicked(\"generate\");\n                }}\n              >\n                {this.props.loading.generate ? (\n                  <Spin indicator={this.loadingIcon} />\n                ) : (\n                  \"Generate keys\"\n                )}\n              </Button>\n\n              <Button\n                ghost\n                className=\"menu-button\"\n                onClick={() => {\n                  this.buttonClicked(\"encrypt\");\n                }}\n              >\n                {this.props.loading.encrypt ? (\n                  <Spin indicator={this.loadingIcon} />\n                ) : (\n                  \"Encrypt\"\n                )}\n              </Button>\n              <Button\n                ghost\n                className=\"menu-button\"\n                onClick={() => {\n                  this.buttonClicked(\"decrypt\");\n                }}\n              >\n                {this.props.loading.decrypt ? (\n                  <Spin indicator={this.loadingIcon} />\n                ) : (\n                  \"Decrypt\"\n                )}\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      </header>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Input, Button, notification } from \"antd\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nconst { TextArea } = Input;\n\nexport class TextField extends Component {\n  copyToClipboard() {\n    this.showNotification(\"success\", this.props.name + \" copied!\", \"\");\n  }\n\n  showNotification(type, title, message) {\n    notification[type]({\n      message: title,\n      description: message,\n      duration: 3\n    });\n  }\n\n  download(content, filename) {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  render() {\n    return (\n      <div>\n        <TextArea\n          autoSize={{ minRows: 10, maxRows: 10 }}\n          placeholder={this.props.placeholder}\n          className=\"key-input\"\n          value={this.props.text}\n          onChange={evt => {\n            this.props.onChange({ value: evt.target.value });\n          }}\n        ></TextArea>\n        <CopyToClipboard\n          onCopy={() => {\n            this.copyToClipboard();\n          }}\n          text={this.props.text}\n        >\n          <Button className=\"textarea-button\" ghost>\n            Copy\n          </Button>\n        </CopyToClipboard>\n        <Button\n          className=\"textarea-button\"\n          ghost\n          onClick={() => {\n            this.download(\n              this.props.text,\n              this.props.filename || this.props.name\n            );\n          }}\n        >\n          Download\n        </Button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GpgManager from \"gpg-manager\";\n\nimport { Row, Col, notification } from \"antd\";\nimport { CredentialsModal } from \"./components/modal/CredentialsModal\";\nimport { PassphraseModal } from \"./components/modal/PassphraseModal\";\nimport { TopBar } from \"./components/topbar/TopBar\";\nimport { TextField } from \"./components/textfield/TextField\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      privateKey: \"\",\n      publicKey: \"\",\n      encryptedMessage: \"\",\n      decryptedMessage: \"\",\n      passphrase: \"\",\n      email: \"\",\n      loading: {\n        generate: false,\n        encrypt: false,\n        decrypt: false\n      },\n      generateKeysModalVisible: false,\n      passphraseModalVisible: false\n    };\n  }\n\n  async componentDidMount() {\n    this.gpgManager = new GpgManager({ rsaKeyBits: 4096 });\n  }\n\n  showError(message) {\n    this.showNotification(\"error\", \"Error\", message);\n  }\n\n  showNotification(type, title, message) {\n    notification[type]({\n      message: title,\n      description: message,\n      duration: 3\n    });\n  }\n\n  async generateKeys(data) {\n    try {\n      const { privateKey, publicKey } = await this.gpgManager.generateKeyPair({\n        passphrase: data.passphrase,\n        user: {\n          email: data.email,\n          name: data.email\n        }\n      });\n\n      this.setState({ publicKey, privateKey });\n    } catch (err) {\n      this.showError(\"Could not generate keys\");\n    }\n  }\n\n  async encrypt() {\n    if (!this.state.publicKey) {\n      return this.showError(\"Please provide public key\");\n    }\n\n    if (!this.state.decryptedMessage) {\n      return this.showError(\"Please provide message\");\n    }\n\n    try {\n      const encryptedMessage = await this.gpgManager.encrypt({\n        publicKey: this.state.publicKey,\n        signMessage: false,\n        message: this.state.decryptedMessage\n      });\n\n      this.setState({ encryptedMessage });\n    } catch (err) {\n      this.showError(\n        \"Could not encrypt message. Check if public key is correct\"\n      );\n    }\n  }\n\n  async decrypt(data) {\n    if (!this.state.privateKey) {\n      return this.showError(\"Please provide private key\");\n    }\n\n    if (!this.state.encryptedMessage) {\n      return this.showError(\"Please provide encrypted message\");\n    }\n\n    try {\n      const decryptedMessage = await this.gpgManager.decrypt({\n        verify: false,\n        privateKey: this.state.privateKey,\n        passphrase: data.passphrase,\n        encryptedMessage: this.state.encryptedMessage\n      });\n\n      this.setState({ decryptedMessage });\n    } catch (err) {\n      if (err.message === \"Incorrect key passphrase\") {\n        this.setState({ passphraseModalVisible: true });\n      }\n      this.showError(\n        \"Could not decrypt message. Check if provided data is correct\"\n      );\n    }\n  }\n\n  async onGenerateKeysModalOk(data) {\n    this.setState({\n      email: data.email,\n      passphrase: data.passphrase,\n      generateKeysModalVisible: false,\n      loading: {\n        generate: true\n      }\n    });\n\n    await this.generateKeys(data);\n\n    this.setState({\n      loading: {\n        generate: false\n      }\n    });\n  }\n\n  onGenerateKeysModalCancel() {\n    this.setState({\n      generateKeysModalVisible: false\n    });\n  }\n\n  async onPassphraseModalOk(data) {\n    this.setState({\n      passphrase: data.passphrase,\n      passphraseModalVisible: false,\n      loading: {\n        decrypt: true\n      }\n    });\n\n    await this.decrypt(data);\n\n    this.setState({\n      loading: {\n        decrypt: false\n      }\n    });\n  }\n\n  onPassphraseModalCancel() {\n    this.setState({\n      passphraseModalVisible: false\n    });\n  }\n\n  onGenerateButtonPress() {\n    this.setState({ generateKeysModalVisible: true });\n  }\n\n  async onEcryptButtonPress() {\n    this.setState({\n      loading: {\n        encrypt: true\n      }\n    });\n    await this.encrypt();\n    this.setState({\n      loading: {\n        encrypt: false\n      }\n    });\n  }\n\n  async onDecryptButtonPress() {\n    if (!this.state.passphrase) {\n      this.setState({\n        passphraseModalVisible: true\n      });\n      return;\n    }\n\n    this.setState({\n      loading: {\n        decrypt: true\n      }\n    });\n\n    await this.decrypt({ passphrase: this.state.passphrase });\n\n    this.setState({\n      loading: {\n        decrypt: false\n      }\n    });\n  }\n\n  async onTopBarButtonPress(id) {\n    switch (id) {\n      case \"generate\":\n        await this.onGenerateButtonPress();\n        break;\n      case \"encrypt\":\n        await this.onEcryptButtonPress();\n        break;\n      case \"decrypt\":\n        await this.onDecryptButtonPress();\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar\n          title=\"Online PGP\"\n          onButtonPress={this.onTopBarButtonPress.bind(this)}\n          loading={this.state.loading}\n        ></TopBar>\n        <CredentialsModal\n          visible={this.state.generateKeysModalVisible}\n          onOk={this.onGenerateKeysModalOk.bind(this)}\n          onCancel={this.onGenerateKeysModalCancel.bind(this)}\n        ></CredentialsModal>\n        <PassphraseModal\n          visible={this.state.passphraseModalVisible}\n          onOk={this.onPassphraseModalOk.bind(this)}\n          onCancel={this.onPassphraseModalCancel.bind(this)}\n        ></PassphraseModal>\n        <Row\n          className=\"row\"\n          type=\"flex\"\n          justify=\"space-around\"\n          gutter={[0, 100]}\n        >\n          <Col span={8}>\n            <TextField\n              name=\"Private key\"\n              placeholder=\"Paste private key here\"\n              filename=\"private.key\"\n              text={this.state.privateKey}\n              onChange={data => {\n                this.setState({ privateKey: data.value });\n              }}\n            ></TextField>\n          </Col>\n          <Col span={8}>\n            <TextField\n              name=\"Public key\"\n              placeholder=\"Paste public key here\"\n              filename=\"public.key\"\n              text={this.state.publicKey}\n              onChange={data => {\n                this.setState({ publicKey: data.value });\n              }}\n            ></TextField>\n          </Col>\n        </Row>\n        <Row\n          className=\"row\"\n          type=\"flex\"\n          justify=\"space-around\"\n          gutter={[0, 100]}\n        >\n          <Col span={8}>\n            <TextField\n              name=\"Message\"\n              placeholder=\"Paste message here\"\n              filename=\"message.txt\"\n              text={this.state.decryptedMessage}\n              onChange={data => {\n                this.setState({ decryptedMessage: data.value });\n              }}\n            ></TextField>\n          </Col>\n          <Col span={8}>\n            <TextField\n              name=\"Encrypted message\"\n              placeholder=\"Paste encrypted message here\"\n              filename=\"encrypted.gpg\"\n              text={this.state.encryptedMessage}\n              onChange={data => {\n                this.setState({ encryptedMessage: data.value });\n              }}\n            ></TextField>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}